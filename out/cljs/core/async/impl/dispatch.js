goog.provide('cljs.core.async.impl.dispatch');
goog.require('cljs.core');
goog.require('cljs.core.async.impl.buffers');
goog.require('goog.async.nextTick');
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null,(32));
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = (1024);
cljs.core.async.impl.dispatch.process_messages = (function cljs$core$async$impl$dispatch$process_messages(){
cljs.core.async.impl.dispatch.running_QMARK_ = true;

cljs.core.async.impl.dispatch.queued_QMARK_ = false;

var count_34 = (0);
while(true){
var m_35 = cljs.core.async.impl.dispatch.tasks.pop();
if((m_35 == null)){
} else {
m_35.call(null);

if((count_34 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE)){
var G__36 = (count_34 + (1));
count_34 = G__36;
continue;
} else {
}
}
break;
}

cljs.core.async.impl.dispatch.running_QMARK_ = false;

if((cljs.core.async.impl.dispatch.tasks.length > (0))){
return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
} else {
return null;
}
});
cljs.core.async.impl.dispatch.queue_dispatcher = (function cljs$core$async$impl$dispatch$queue_dispatcher(){
if((cljs.core.async.impl.dispatch.queued_QMARK_) && (cljs.core.async.impl.dispatch.running_QMARK_)){
return null;
} else {
cljs.core.async.impl.dispatch.queued_QMARK_ = true;

return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
}
});
cljs.core.async.impl.dispatch.run = (function cljs$core$async$impl$dispatch$run(f){
cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);

return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
});
cljs.core.async.impl.dispatch.queue_delay = (function cljs$core$async$impl$dispatch$queue_delay(f,delay){
return setTimeout(f,delay);
});

//# sourceURL=out/cljs/core/async/impl/dispatch.js?rel=1512906458706
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0L2NsanMvY29yZS9hc3luYy9pbXBsL2Rpc3BhdGNoLmpzP3JlbD0xNTEyOTA2NDU4NzA2Iiwic291cmNlcyI6WyJkaXNwYXRjaC5jbGpzP3JlbD0xNTEyOTA2NDU4NzA2Il0sImxpbmVDb3VudCI6NTgsIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBLEFBQUtBLHNDQUFNLG1EQUFBLG5EQUFDQztBQUNaLCtDQUFBLC9DQUFLQztBQUNMLDhDQUFBLDlDQUFLQztBQUVMLGdEQUFBLGhEQUFLQztBQUVMLEFBQUEsQUFFQSxpREFBQSxqREFBTUM7QUFBTixBQUNFLCtDQUFBLC9DQUFNSDs7QUFDTiw4Q0FBQSw5Q0FBTUM7O0FBQ04sZUFBQSxYQUFPRzs7QUFBUCxBQUNFLElBQU1DLE9BQUUsQUFBTVA7QUFBZCxBQUNFLEdBQVUsU0FBQSxSQUFNTztBQUFoQjtBQUFBLEFBQ0UsQUFBQ0E7O0FBQ0QsR0FBTSxDQUFHRCxXQUFNRjtBQUFmLEFBQ0UsWUFBTyxZQUFBLFhBQUtFOzs7O0FBRGQ7Ozs7O0FBRU4sK0NBQUEsL0NBQU1KOztBQUNOLEdBQU0sOENBQUEsN0NBQUcsQUFBVUY7QUFBbkIsQUFDRSxPQUFDUTs7QUFESDs7O0FBR0YsaURBQUEsakRBQU1BO0FBQU4sQUFDRSxHQUFVLENBQUtMLGlEQUFRRDtBQUF2Qjs7QUFBQSxBQUNFLDhDQUFBLDlDQUFNQzs7QUFDTixPQUFDTSxvQkFBb0JKOzs7QUFFekIsb0NBQUEscENBQU1LLGdGQUFLQztBQUFYLEFBQ0UsQUFBb0JYLHNEQUFNVzs7QUFDMUIsT0FBQ0g7O0FBRUgsNENBQUEsNUNBQU1JLGdHQUFhRCxFQUFFRTtBQUFyQixBQUNFLE9BQUNDLFdBQWNILEVBQUVFIiwibmFtZXMiOlsiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvdGFza3MiLCJjbGpzLmNvcmUuYXN5bmMuaW1wbC5idWZmZXJzL3JpbmctYnVmZmVyIiwiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvcnVubmluZz8iLCJjbGpzLmNvcmUuYXN5bmMuaW1wbC5kaXNwYXRjaC9xdWV1ZWQ/IiwiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvVEFTS19CQVRDSF9TSVpFIiwiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvcHJvY2Vzcy1tZXNzYWdlcyIsImNvdW50IiwibSIsImNsanMuY29yZS5hc3luYy5pbXBsLmRpc3BhdGNoL3F1ZXVlLWRpc3BhdGNoZXIiLCJnb29nL2FzeW5jLm5leHRUaWNrIiwiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvcnVuIiwiZiIsImNsanMuY29yZS5hc3luYy5pbXBsLmRpc3BhdGNoL3F1ZXVlLWRlbGF5IiwiZGVsYXkiLCJqcy9zZXRUaW1lb3V0Il0sInNvdXJjZXNDb250ZW50IjpbIihucyBjbGpzLmNvcmUuYXN5bmMuaW1wbC5kaXNwYXRjaFxuICAoOnJlcXVpcmUgW2NsanMuY29yZS5hc3luYy5pbXBsLmJ1ZmZlcnMgOmFzIGJ1ZmZlcnNdXG4gICAgICAgICAgICBbZ29vZy5hc3luYy5uZXh0VGlja10pKVxuXG4oZGVmIHRhc2tzIChidWZmZXJzL3JpbmctYnVmZmVyIDMyKSlcbihkZWYgcnVubmluZz8gZmFsc2UpXG4oZGVmIHF1ZXVlZD8gZmFsc2UpXG5cbihkZWYgVEFTS19CQVRDSF9TSVpFIDEwMjQpXG5cbihkZWNsYXJlIHF1ZXVlLWRpc3BhdGNoZXIpXG5cbihkZWZuIHByb2Nlc3MtbWVzc2FnZXMgW11cbiAgKHNldCEgcnVubmluZz8gdHJ1ZSlcbiAgKHNldCEgcXVldWVkPyBmYWxzZSlcbiAgKGxvb3AgW2NvdW50IDBdXG4gICAgKGxldCBbbSAoLnBvcCB0YXNrcyldXG4gICAgICAod2hlbi1ub3QgKG5pbD8gbSlcbiAgICAgICAgKG0pXG4gICAgICAgICh3aGVuICg8IGNvdW50IFRBU0tfQkFUQ0hfU0laRSlcbiAgICAgICAgICAocmVjdXIgKGluYyBjb3VudCkpKSkpKVxuICAoc2V0ISBydW5uaW5nPyBmYWxzZSlcbiAgKHdoZW4gKD4gKC4tbGVuZ3RoIHRhc2tzKSAwKVxuICAgIChxdWV1ZS1kaXNwYXRjaGVyKSkpXG5cbihkZWZuIHF1ZXVlLWRpc3BhdGNoZXIgW11cbiAgKHdoZW4tbm90IChhbmQgcXVldWVkPyBydW5uaW5nPylcbiAgICAoc2V0ISBxdWV1ZWQ/IHRydWUpXG4gICAgKGdvb2cuYXN5bmMubmV4dFRpY2sgcHJvY2Vzcy1tZXNzYWdlcykpKVxuXG4oZGVmbiBydW4gW2ZdXG4gICgudW5ib3VuZGVkLXVuc2hpZnQgdGFza3MgZilcbiAgKHF1ZXVlLWRpc3BhdGNoZXIpKVxuXG4oZGVmbiBxdWV1ZS1kZWxheSBbZiBkZWxheV1cbiAgKGpzL3NldFRpbWVvdXQgZiBkZWxheSkpXG5cbiJdfQ==